<?xml version="1.0"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:FormatUtil="http://xml.apache.org/xalan/xsltc/java/com.nightfire.maputil.FormatUtil" exclude-result-prefixes="FormatUtil">	<!-- ========================================================================================================== -->	<!--  Update for ZTEL May-2005 upgrade.                                                                         -->	<!--  Change history:												-->	<!--  Date 28/06/05                 Author : Manjul Jaiswal							-->	<!-- ========================================================================================================== -->	<xsl:import href="../common/LSRReqTemplates.xsl"/>	<xsl:import href="ReqForms.xsl"/>	<xsl:output method="xml" indent="yes"/>	<xsl:variable name="REQTYP" select="substring(/msgenvelope/body/localAdmin/admin/reqtyp,1,1)"/>	<xsl:variable name="ACT" select="/msgenvelope/body/localAdmin/admin/act"/>	<xsl:variable name="TOS" select="/msgenvelope/body/localAdmin/admin/tos"/>	<xsl:variable name="TOS1" select="substring(/msgenvelope/body/localAdmin/admin/tos,1,1)"/>	<xsl:variable name="TOS2" select="substring(/msgenvelope/body/localAdmin/admin/tos,2,1)"/>	<xsl:variable name="TOS4" select="substring(/msgenvelope/body/localAdmin/admin/tos,4,1)"/>	<xsl:variable name="STATE" select="/msgenvelope/body/localAdmin/location[1]/address/state"/>	<xsl:variable name="ACT1">		<xsl:choose>			<xsl:when test="/msgenvelope/body/localAdmin/admin/act = 'M'">T</xsl:when>			<xsl:when test="(count(/msgenvelope/body/lns/service/lna) = 1) and /msgenvelope/body/lns/service/lna = 'R' and $ACT = 'C'">J</xsl:when>			<xsl:otherwise>				<xsl:value-of select="/msgenvelope/body/localAdmin/admin/act"/>			</xsl:otherwise>		</xsl:choose>	</xsl:variable>	<xsl:template match="/">		<xsl:variable name="dummyAct1" select="$ACT1"/>		<Request>			<xsl:if test="$REQTYP ='M' ">				<lsr_order>					<xsl:for-each select="msgenvelope/body/localAdmin">						<xsl:call-template name="lsr_form"/>					</xsl:for-each>					<xsl:if test="msgenvelope/body/localAdmin/hunt">						<hgicontainer type="container">							<xsl:for-each select="msgenvelope/body/localAdmin/hunt">								<xsl:call-template name="hgi_form"/>							</xsl:for-each>						</hgicontainer>					</xsl:if>					<xsl:for-each select="msgenvelope/body/localAdmin">						<xsl:call-template name="eu_form"/>					</xsl:for-each>					<!--LSR, EU, PS forms are required and all other forms are prohibited		   			when REQTYP = D and ACT = B, S, D.-->					<!--DL form is required if the ELT field on the EU form is populated with E or P, 					otherwise prohibited when REQTYP = D, E, F, M, and ACT = V.-->					<xsl:if test="(/msgenvelope/body/localAdmin/admin/act != 'B' and  /msgenvelope/body/localAdmin/admin/act != 'S' and   /msgenvelope/body/localAdmin/admin/act != 'D') and     not(/msgenvelope/body/localAdmin/admin/act='V' and not(/msgenvelope/body/localAdmin/location[erl='E' or erl='P']))">						<xsl:if test="msgenvelope/body/directory">							<dlcontainer type="container">								<xsl:for-each select="msgenvelope/body/directory">									<xsl:call-template name="dl_form"/>								</xsl:for-each>							</dlcontainer>						</xsl:if>					</xsl:if>					<!--LSR, EU, DL forms are required and all other forms are prohibited		   			when REQTYP = D and ACT = J.-->					<xsl:choose>						<xsl:when test="/msgenvelope/body/localAdmin/admin/act = 'J'">							<!--No operation-->						</xsl:when>						<!--<xsl:if test="/msgenvelope/body/localAdmin/admin/act != 'J'">-->						<xsl:when test="count(/msgenvelope/body/lns/service[lna = 'W']) = count(/msgenvelope/body/lns/service/lna)">							<!--<xsl:if test="not(count(/msgenvelope/body/lns/service[lna = 'W']) = count(/msgenvelope/body/lns/service/lna))">-->							<!--No operation-->						</xsl:when>						<xsl:when test="(count(/msgenvelope/body/lns/service/lna) = 1) and /msgenvelope/body/lns/service/lna = 'R' and $ACT = 'C'">							<!-- No operation-->						</xsl:when>						<xsl:otherwise>							<xsl:for-each select="msgenvelope/body/lns">								<xsl:call-template name="ps_form"/>							</xsl:for-each>						</xsl:otherwise>						<!--</xsl:if>					</xsl:if>-->					</xsl:choose>				</lsr_order>				<SupplierLSROrderRequest>					<xsl:for-each select="msgenvelope/body/localAdmin">						<!-- Checking if there are any supplier specific nodes to mapped -->						<xsl:if test="/msgenvelope/body/localAdmin/location/address/route != '' or     /msgenvelope/body/localAdmin/location/address/box != ''">							<xsl:call-template name="supplier_eu_form"/>						</xsl:if>					</xsl:for-each>					<xsl:if test="msgenvelope/body/directory">						<!-- Checking if there are any supplier specific nodes to mapped -->						<xsl:if test="/msgenvelope/body/directory/dscr/seqtext != '' or /msgenvelope/body/directory/dscr/seqtn != '' or /msgenvelope/body/directory/dscr/hs != '' or /msgenvelope/body/directory/dscr/htn != '' or /msgenvelope/body/directory/dscr/haddr != ''">							<dlcontainer type="container">								<xsl:for-each select="msgenvelope/body/directory">									<xsl:call-template name="supplier_dl_form"/>								</xsl:for-each>							</dlcontainer>						</xsl:if>					</xsl:if>					<xsl:for-each select="msgenvelope/body/lns">						<!-- Checking if there are any supplier specific nodes to mapped -->						<xsl:if test="/msgenvelope/body/lns/service/exkey != ''">							<xsl:call-template name="supplier_ps_form"/>						</xsl:if>					</xsl:for-each>				</SupplierLSROrderRequest>			</xsl:if>		</Request>	</xsl:template>	<!--*************************Specific mapping templates of generic fields in LSR form*************************-->	<!-- Commx Field reqtyp value 'MB' is mapped to NF field REQTYP as 'DB' -->	<xsl:template name="reqtyp_TO_REQTYP">		<xsl:if test="reqtyp != ''">			<xsl:choose>				<xsl:when test="reqtyp = 'MB'">					<xsl:call-template name="ConvertWithValue">						<xsl:with-param name="Node" select="'REQTYP'"/>						<xsl:with-param name="Val" select="'DB'"/>					</xsl:call-template>				</xsl:when>				<xsl:otherwise>					<REQTYP value="{reqtyp}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!-- Commx Field act value 'M' is mapped to NF field ACT as 'T' -->	<xsl:template name="act_TO_ACT">		<xsl:if test="act != ''">			<xsl:choose>				<xsl:when test="act = 'M'">					<xsl:call-template name="ConvertWithValue">						<xsl:with-param name="Node" select="'ACT'"/>						<xsl:with-param name="Val" select="'T'"/>					</xsl:call-template>				</xsl:when>				<xsl:when test="(count(/msgenvelope/body/lns/service/lna) = 1) and /msgenvelope/body/lns/service/lna = 'R' and $ACT = 'C'">					<ACT value="J"/>				</xsl:when>				<xsl:otherwise>					<ACT value="{act}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<xsl:template name="exp_TO_EXP">		<xsl:if test="exp != ''">			<xsl:choose>				<xsl:when test="exp = 'Y'">					<xsl:call-template name="ConvertWithValue">						<xsl:with-param name="Node" select="'EXP'"/>						<xsl:with-param name="Val" select="'E'"/>					</xsl:call-template>				</xsl:when>				<xsl:otherwise>					<xsl:if test="not(exp = 'N')">						<EXP value="{exp}"/>					</xsl:if>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--Drop the field CC in Maps when the CCNA field is not "CUS".-->	<xsl:template name="cc_TO_CC">		<xsl:if test="cc != '' and ccna ='CUS' ">			<CC value="{cc}"/>		</xsl:if>	</xsl:template>	<!--"Truncate this field from beginning if ZTEL send more than 25 A/N character. Confirmation Required.  "   -->	<xsl:template name="initname_TO_INIT">		<xsl:if test="name != ''">			<INIT value="{substring(name,1,25)}"/>		</xsl:if>	</xsl:template>	<!--"Pad with '0' when field length is not equal to '3'. confirmation required"-->	<xsl:template name="ccna_TO_CCNA">		<xsl:if test="ccna != ''">			<xsl:choose>				<xsl:when test="string-length(ccna)=1">					<CCNA>						<xsl:attribute name="value">							<xsl:value-of select="concat('00',ccna)"/>						</xsl:attribute>					</CCNA>				</xsl:when>				<xsl:when test="string-length(ccna)=2">					<CCNA>						<xsl:attribute name="value">							<xsl:value-of select="concat('0',ccna)"/>						</xsl:attribute>					</CCNA>				</xsl:when>				<xsl:otherwise>					<CCNA value="{ccna}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--"Pad with '0' when field length is not equal to '11' Confirmation Required"-->	<xsl:template name="lst_TO_LST">		<xsl:if test="lst != ''">			<xsl:choose>				<xsl:when test="string-length(lst)=1">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('0000000000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=2">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('000000000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=3">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('00000000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=4">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('0000000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=5">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('000000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=6">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('00000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=7">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('0000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=8">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('000',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=9">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('00',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:when test="string-length(lst)=10">					<LST>						<xsl:attribute name="value">							<xsl:value-of select="concat('0',lst)"/>						</xsl:attribute>					</LST>				</xsl:when>				<xsl:otherwise>					<LST value="{lst}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--"Pad with '0' when field length is not equal to '4' Confirmation Required"-->	<xsl:template name="nc_TO_NC">		<xsl:if test="nc != ''">			<xsl:choose>				<xsl:when test="string-length(nc)=1">					<NC>						<xsl:attribute name="value">							<xsl:value-of select="concat('000',nc)"/>						</xsl:attribute>					</NC>				</xsl:when>				<xsl:when test="string-length(nc)=2">					<NC>						<xsl:attribute name="value">							<xsl:value-of select="concat('00',nc)"/>						</xsl:attribute>					</NC>				</xsl:when>				<xsl:when test="string-length(nc)=3">					<NC>						<xsl:attribute name="value">							<xsl:value-of select="concat('0',nc)"/>						</xsl:attribute>					</NC>				</xsl:when>				<xsl:otherwise>					<NC value="{nc}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of generic fields in HGI form*************************-->	<xsl:template name="hnum_TO_HNUM">		<HNUM value="{format-number(hnum,'00000')}"/>	</xsl:template>	<!--HID can be defaluted to "New" when HA is "N". But Ztel can 	easily supplement this value. If, not we can default to"New". Should be communicated to Ztel.-->	<!-- If HID is required, and it must be 12 characters, then pad the Trinsic value with all zeros.  	If the conditional usage by VZE requires the value to be 'New', then map the Trinsic value to 'New'.-->	<xsl:template name="hid_TO_HID">		<xsl:choose>			<xsl:when test="hid != '' and ha='N'">				<HID value="New"/>			</xsl:when>			<xsl:otherwise>				<xsl:if test="string-length(hid)=1">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('00000000000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=2">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('0000000000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=3">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('000000000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=4">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('00000000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=5">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('0000000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=6">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('000000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=7">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('00000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=8">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('0000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=9">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('000',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=10">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('00',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>				<xsl:if test="string-length(hid)=11">					<HID>						<xsl:attribute name="value">							<xsl:value-of select="concat('0',hid)"/>						</xsl:attribute>					</HID>				</xsl:if>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- TIP is prohibited when HA = E, otherwise optional.-->	<!-- TIP field is only applicable for multi- line hunt groups (HNTYP = 4).             ZTEL's HNTYP = 5 is equivalent to VZE HNTYP = 4, so check for HNTYP = 5.-->	<xsl:template name="tip_TO_TIP">		<xsl:if test="hntyp='5' and not(ha='E') and tip != ''">			<TIP value="{tip}"/>		</xsl:if>	</xsl:template>	<!--TLI field is only applicable for multi- line hunt groups (HNTYP = 4).-->	<!--ZTEL's HNTYP = 5 is equivalent to VZE HNTYP = 4, so check for HNTYP = 5.-->	<xsl:template name="tli_TO_TLI">		<xsl:if test="hntyp='5' and tli != ''">			<xsl:for-each select="tli">				<TLI>					<xsl:attribute name="value">						<xsl:value-of select="FormatUtil:formatTelno(string(.))"/>					</xsl:attribute>				</TLI>			</xsl:for-each>		</xsl:if>	</xsl:template>	<!--Map Commx value 4 to 2, 5 to 4 and rest as they are -->	<xsl:template name="hntyp_TO_HNTYP">		<xsl:if test="hntyp != ''">			<xsl:choose>				<xsl:when test="hntyp='4'">					<HNTYP value="2"/>				</xsl:when>				<xsl:when test="hntyp='5'">					<HNTYP value="4"/>				</xsl:when>				<xsl:otherwise>					<HNTYP value="{hntyp}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--IF ZTEL does not send HLA=N when HA=N, we need to populate with a default value N.-->	<xsl:template name="hla_TO_HLA">		<xsl:if test="hla != ''">			<xsl:choose>				<xsl:when test="../ha='N'">					<HLA value="N"/>				</xsl:when>				<xsl:when test="hla='I'">					<HLA value="N"/>				</xsl:when>				<xsl:when test="hla='O'">					<HLA value="D"/>				</xsl:when>				<xsl:otherwise>					<HLA value="{hla}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of generic fields in EU form*************************-->	<!--WSOP is required when (((the ACT field on the LSR Form = "N" or "T") or (the LNA field on the RS or PS Form = "T")) 	and (the 1st character of the TOS field = "2")), otherwise prohibited.-->	<!---Default WSOP to Z when Ztel does not send it.-->	<xsl:template name="wsop_TO_WSOP">		<xsl:if test="(($ACT1='N' or $ACT1='T') or (/msgenvelope/body/lns/service[*][lna='T']))and $TOS1='2'">			<xsl:choose>				<xsl:when test="wsop!=''">					<WSOP value="{wsop}"/>				</xsl:when>				<xsl:otherwise>					<WSOP value="Z"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<xsl:template name="erl_TO_ELT">		<xsl:if test="erl !=''">			<xsl:choose>				<xsl:when test="erl='Y'">					<ELT>						<xsl:attribute name="value">							<xsl:value-of select="'A'"/>						</xsl:attribute>					</ELT>				</xsl:when>				<xsl:otherwise>					<xsl:if test="erl='N'">						<ELT>							<xsl:attribute name="value">								<xsl:value-of select="'B'"/>							</xsl:attribute>						</ELT>					</xsl:if>					<xsl:if test="erl='E'">						<ELT>							<xsl:attribute name="value">								<xsl:value-of select="'E'"/>							</xsl:attribute>						</ELT>					</xsl:if>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--AAI is optional when 		SASN is populated or 		((the first character of the REQTYP field on the LSR Form = "E" or "D") and 		(((the ACT field on the LSR Form = "C" or "V") and (the LNA field on the PS or RS Form = "N" or "X"))or		((the ACT field on the LSR Form = "C")and(the LNA field on the PS or RS Form = "C")))). Otherwise prohibited-->	<xsl:template name="aai_TO_AAI">		<xsl:if test="adrSn != '' and ((aft = 'C' or aft = 'N') and ((($ACT1='N' or $ACT1='T') and ($TOS2!='F' and $TOS2!='P' and $TOS2!='R' and $TOS2!='Y')) or     (/msgenvelope/body/lns/service[*]/lna='T' and $ACT1 != 'T') or ($TOS4='R' and (/msgenvelope/body/lns/service[*][lna='N' or lna='V'] or (/msgenvelope/body/lns/service[*][lna='M'] and $ACT1 = 'T'))))) or (($REQTYP='D' and ((($ACT1='C' or $ACT1='V') and  (/msgenvelope/body/lns/service[*][lna='N' or lna='X'] or ($ACT1='T' and /msgenvelope/body/lns/service[*][lna='M'])))or($ACT1='C' and /msgenvelope/body/lns/service[*]/lna='C'))))">			<!--BAN and BAS specefies that AAI shoultbe 1-100 AN chars.-->			<AAI value="{substring(aai,1,100)}"/>		</xsl:if>	</xsl:template>	<!-- Commx Field  value 'FLR' is mapped to NF field LD2 as 'FL' -->	<!--<xsl:template name="ld2_TO_LD2">		<xsl:if test="ld2 != ''">			<xsl:choose>				<xsl:when test="ld2 = 'FLR'">					<xsl:call-template name="ConvertWithValue">						<xsl:with-param name="Node" select="'LD2'"/>						<xsl:with-param name="Val" select="'FL'"/>					</xsl:call-template>				</xsl:when>				<xsl:otherwise>					<LD2 value="{ld2}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>-->	<!-- Commx Field fbi value 'Y' is mapped to NF field FBI as 'D' and 'N' & '-' to 'E' -->	<xsl:template name="fbi_TO_FBI">		<xsl:if test="fbi != ''">			<xsl:choose>				<xsl:when test="fbi='-'">				</xsl:when>				<xsl:when test="fbi = 'N' ">				</xsl:when>				<xsl:when test="fbi = 'Y'">					<xsl:call-template name="ConvertWithValue">						<xsl:with-param name="Node" select="'FBI'"/>						<xsl:with-param name="Val" select="'D'"/>					</xsl:call-template>				</xsl:when>				<xsl:otherwise>					<FBI value="{fbi}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of supplier specific fields in EU form*************************-->	<xsl:template name="route_TO_ROUTE">		<xsl:if test="route != ''">			<ROUTE value="{route}"/>		</xsl:if>	</xsl:template>	<xsl:template name="box_TO_BOX">		<xsl:if test="box != ''">			<BOX value="{substring(box,1,9)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="discNmbr_TO_DISCNBR">		<xsl:choose>			<xsl:when test="$ACT1 = 'T' and position()='1'">				<DISCNBR>					<xsl:attribute name="value">						<xsl:value-of select="FormatUtil:formatTelno(string(/msgenvelope/body/localAdmin/eubill/eatn))"/>					</xsl:attribute>				</DISCNBR>			</xsl:when>			<xsl:otherwise>				<DISCNBR value="{FormatUtil:formatTelno(string(discNmbr))}"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!--**************************Valid value format conversion for EU form.*************************************-->	<xsl:template name="name_TO_NAME">		<xsl:if test="name != ''">			<NAME value="{substring(name,1,25)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="adrSf_TO_SASF">		<xsl:if test="adrSf != ''">			<SASF value="{substring(adrSf,1,4)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="adrSn_TO_SASN">		<xsl:if test="adrSn != ''">			<SASN value="{substring(adrSn,1,50)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="adrTh_TO_SATH">		<xsl:if test="adrTh != ''">			<SATH value="{substring(adrTh,1,7)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv1_TO_LV1">		<xsl:if test="lv1 != ''">			<LV1 value="{substring(lv1,1,10)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv2_TO_LV2">		<xsl:if test="lv2 != ''">			<LV2 value="{substring(lv2,1,10)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv3_TO_LV3">		<xsl:if test="lv3 != ''">			<LV3 value="{substring(lv3,1,10)}"/>		</xsl:if>	</xsl:template>	<xsl:template name="city_TO_CITY">		<xsl:if test="city != ''">			<CITY value="{substring(city,1,32)}"/>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of generic fields in DL form*************************-->	<!--The valid values for LACT are N, D, I or Z.-->	<xsl:template name="lact_TO_LACT">		<xsl:if test="lact !='' and not(lact='O')">			<xsl:choose>				<xsl:when test="$ACT1= 'N' or $ACT1 = 'T'">					<LACT>						<xsl:attribute name="value">							<xsl:value-of select="'N'"/>						</xsl:attribute>					</LACT>				</xsl:when>				<xsl:when test="lact='I' and $ACT1='C'">					<LACT>						<xsl:attribute name="value">							<xsl:value-of select="'I'"/>						</xsl:attribute>					</LACT>				</xsl:when>				<!--xsl:when test="lact='I' and $ACT1='C' and (/msgenvelope/body/lns/service[*]/lna='T') and rty='LML'">					<LACT>						<xsl:attribute name="value">							<xsl:value-of select="'N'"/>						</xsl:attribute>					</LACT>				</xsl:when>								<xsl:when test="lact='I' and $ACT1='C'">					<LACT>						<xsl:attribute name="value">							<xsl:value-of select="'N'"/>						</xsl:attribute>					</LACT>				</xsl:when>-->				<xsl:otherwise>					<LACT value="{lact}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--ALI is prohibited when (LACT = N) or (RTY = LML and REQTYP = A, B,C or J and ACT = V) 	or (RTY = LML and BAN1 OR BAN2 on LSR form are not populated) or ( STATE = MA, NH, VT, RI, ME [NE States], 	RTY = LML and BRO is not = A ) or ( STATE = NY, 2nd and 3rd character of RTY = PL and LTY = 3 or 4 ).-->	<xsl:template name="ali_TO_ALI">		<xsl:if test="ali!=''">			<xsl:choose>				<xsl:when test="((lact='N' or ($ACT1= 'N' or $ACT1 = 'T')) or (rty='LML') or     (/msgenvelope/body/localAdmin/location/address[state='MA' or state='NH' or state='VT' or state='RI' or      state='ME']and rty='LML') or (/msgenvelope/body/localAdmin/location/address/state='NY' and      substring(rty,2,2)='PL'and (lty='3' or lty='4')))">				</xsl:when>				<xsl:otherwise>					<ALI value="{ali}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--Drop the field LTY in Maps for LACT = Z-->	<!--LTY value '2' is prohibited if EU state is 'NY'-->	<xsl:template name="lty_TO_LTY">		<xsl:if test="lty !=''">			<xsl:choose>				<xsl:when test="lact='Z' and not($ACT1= 'N' or $ACT1 = 'T')"/>				<xsl:otherwise>					<LTY value="{lty}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--Drop the field STYC in Maps for LACT = D or Z -->	<xsl:template name="styc_TO_STYC">		<xsl:if test="styc != '' and (not(lact = 'Z') and not(lact = 'D') or ($ACT1 = 'N' or $ACT1 = 'T'))">			<STYC value="{styc}"/>		</xsl:if>	</xsl:template>	<!--Drop the field TOA in Maps for LACT = Z-->	<xsl:template name="toa_TO_TOA">		<xsl:if test="toa != '' and (not(lact = 'Z') or ($ACT1 = 'N' or $ACT1 = 'T'))">			<xsl:if test="toa='C' or toa='F' or toa='L'  or toa='S' or toa ='BP'">				<TOA value="{toa}"/>			</xsl:if>		</xsl:if>	</xsl:template>	<!--Drop the field DOI in Maps for either LACT = Z or STYC = SL -->	<!--Drop the field DOI whenever it is populated with the values '0' and '-'.-->	<xsl:template name="doi_TO_DOI">		<xsl:if test="(doi != '' and doi != '0' and doi != '-') and (not(lact = 'Z') or ($ACT1 = 'N' or $ACT1 = 'T')) and not(styc = 'SL') ">			<DOI value="{doi}"/>		</xsl:if>	</xsl:template>	<!--Drop the field LNLN in Maps for LACT = Z or D -->	<xsl:template name="lnln_TO_LNLN">		<xsl:if test="lnln != '' and not(../cont/lact = 'Z') and not(../cont/lact = 'D') or ($ACT1 = 'N' or $ACT1 = 'T')">			<LNLN value="{lnln}"/>		</xsl:if>	</xsl:template>	<!--LNFN is prohibited when LNLN is not populated.-->	<xsl:template name="lnfn_TO_LNFN">		<xsl:if test="lnfn !='' and not(../cont/lact = 'Z') and not(../cont/lact = 'D') or ($ACT1 = 'N' or $ACT1 = 'T')">			<xsl:if test="lnln !=''">				<LNFN value="{lnfn}"/>			</xsl:if>		</xsl:if>	</xsl:template>	<!--Extract the first 80 characters of the field PLA-->	<xsl:template name="pla_TO_PLA">		<xsl:if test="pla != ''">			<PLA value="{substring(pla,1,80)}"/>		</xsl:if>	</xsl:template>	<!--Extract the first 4 characters of the field LASF-->	<xsl:template name="adrSf_TO_LASF">		<xsl:if test="adrSf != ''">			<LASF value="{substring(adrSf,1,4)}"/>		</xsl:if>	</xsl:template>	<!--Extract the first 50 characters of the field LASN-->	<xsl:template name="adrSn_TO_LASN">		<xsl:if test="adrSn != ''">			<!--<LASN value="{substring(concat(translate(substring(adrSn,1,1),'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z','A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z'),translate(substring(adrSn,2,string-length(adrSn)),'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z','a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z')),1,50)}"/>-->			<LASN value="{substring(adrSn,1,50)}"/>		</xsl:if>	</xsl:template>	<!--Extract the first 35 characters of the field LALOC-->	<xsl:template name="city_TO_LALOC">		<xsl:if test="city != ''">			<LALOC value="{substring(city,1,35)}"/>			<!--<xsl:choose>				<xsl:when test="contains(city,' ')">					<LALOC value="{substring(concat(translate(substring(substring-before(city,' '),1,1),'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z','A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z'),translate(substring(substring-before(city,' '),2,string-length(substring-before(city,' '))),'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z','a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'),' ',concat(translate(substring(substring-after(city,' '),1,1),'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z','A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z'),translate(substring(substring-after(city,' '),2,string-length(substring-after(city,' '))),'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z','a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'))),1,50)}"/>				</xsl:when>				<xsl:otherwise>					<LALOC value="{substring(concat(translate(substring(city,1,1),'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z','A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z'),translate(substring(city,2,string-length(city)),'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z','a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z')),1,50)}"/>				</xsl:otherwise>			</xsl:choose>-->		</xsl:if>	</xsl:template>	<!--Pad LTXNUM to 2 numerics if ZTEL sends only 1 numeric and truncating (Taking first two characters) 	if ZTEL send more than two numerics.-->	<xsl:template name="ltxnum_TO_LTXNUM">		<xsl:if test="ltxnum !=''">			<xsl:choose>				<xsl:when test="string-length(ltxnum) &lt; 2">					<LTXNUM>						<xsl:attribute name="value">							<xsl:value-of select="format-number(ltxnum, '00')"/>						</xsl:attribute>					</LTXNUM>				</xsl:when>				<xsl:otherwise>					<LTXNUM>						<xsl:attribute name="value">							<xsl:value-of select="substring(ltxnum,1,2)"/>						</xsl:attribute>					</LTXNUM>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--Extract the first 3 numeric of the field DIRQTYA-->	<xsl:template name="dirqtya_TO_DIRQTYA">		<xsl:if test="dirqtya != ''">			<DIRQTYA value="{substring(dirqtya,1,3)}"/>		</xsl:if>	</xsl:template>	<!--Drop the field YPH in Maps for YPHV="None" or "NONE" -->	<!--YPH is prohibited when the LACT field = D or Z.-->	<xsl:template name="yph_TO_YPH">		<xsl:if test="(yph != '' and not(yphv = 'None') and not(yphv = 'NONE')) and (not(../cont/lact='D') and (not(../cont/lact='Z') or ($ACT1 = 'N' or $ACT1 = 'T')))">			<YPH value="{yph}"/>		</xsl:if>	</xsl:template>	<!--YPHV is prohibited when the LACT field = D or Z-->	<xsl:template name="yphv_TO_YPHV">		<xsl:if test="yphv!=''">			<xsl:if test="not(../cont/lact='D') and (not(../cont/lact='Z') or ($ACT1 = 'N' or $ACT1 = 'T'))">				<YPHV value="{yphv}"/>			</xsl:if>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of supplier specific fields in DL form*************************-->	<!--Drop the field SOSL whenever it is populated with the value 'L' .-->	<xsl:template name="so_TO_SOSL">		<xsl:if test="so != '' and so != 'L'">			<SOSL value="{so}"/>		</xsl:if>	</xsl:template>	<xsl:template name="seqtext_TO_SEQTEXT">		<xsl:if test="seqtext != ''">			<SEQTEXT value="{seqtext}"/>		</xsl:if>	</xsl:template>	<xsl:template name="seqtn_TO_SEQTN">		<xsl:if test="seqtn != ''">			<xsl:for-each select="seqtn">				<SEQTN>					<xsl:attribute name="value">						<xsl:value-of select="FormatUtil:formatTelno(string(.))"/>					</xsl:attribute>				</SEQTN>			</xsl:for-each>		</xsl:if>	</xsl:template>	<xsl:template name="hs_TO_HS">		<xsl:if test="hs != ''">			<HS value="{hs}"/>		</xsl:if>	</xsl:template>	<xsl:template name="htn_TO_HDRTN">		<xsl:if test="htn != ''">			<xsl:for-each select="htn">				<HDRTN>					<xsl:attribute name="value">						<xsl:value-of select="FormatUtil:formatTelno(string(.))"/>					</xsl:attribute>				</HDRTN>			</xsl:for-each>		</xsl:if>	</xsl:template>	<xsl:template name="haddr_TO_HADDR">		<xsl:if test="haddr != ''">			<HADDR value="{haddr}"/>		</xsl:if>	</xsl:template>	<xsl:template name="dlnum_TO_DLNUM">		<xsl:if test="dlnum != ''">			<DLNUM value="{dlnum}"/>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of generic fields in PS form*************************-->	<!-- Commx Field lna value 'M' is mapped to NF field LNA as 'T' and value 'L' is mapped to NF field LNA as 'S'         And ComX 'Y' to 'B'-->	<!-- Rule: LNA is prohibited when the 2nd character of TOS = Y, otherwise required.-->	<xsl:template name="lna_TO_LNA">		<xsl:if test="not(substring(/msgenvelope/body/localAdmin/admin/tos,2,1)='Y')">			<xsl:if test="lna != ''">				<xsl:choose>					<xsl:when test="$ACT1='T' and lna='M'">						<LNA>							<xsl:attribute name="value">								<xsl:value-of select="'N'"/>							</xsl:attribute>						</LNA>					</xsl:when>					<xsl:when test="lna = 'L'">						<xsl:call-template name="ConvertWithValue">							<xsl:with-param name="Node" select="'LNA'"/>							<xsl:with-param name="Val" select="'S'"/>						</xsl:call-template>					</xsl:when>					<xsl:when test="lna = 'Y'">						<xsl:call-template name="ConvertWithValue">							<xsl:with-param name="Node" select="'LNA'"/>							<xsl:with-param name="Val" select="'B'"/>						</xsl:call-template>					</xsl:when>					<xsl:when test="lna = 'R'">						<xsl:call-template name="ConvertWithValue">							<xsl:with-param name="Node" select="'LNA'"/>							<xsl:with-param name="Val" select="'C'"/>						</xsl:call-template>					</xsl:when>					<xsl:otherwise>						<!--Map whatever comes in the input-->						<LNA value="{lna}"/>					</xsl:otherwise>				</xsl:choose>			</xsl:if>		</xsl:if>	</xsl:template>	<!--Drop the field PIC in Maps for LNA = D, B, S(Commx equivalent value 'L'), X.        PIC is required when ACT = W or LNA = N, P,T or V-->	<xsl:template name="pic_TO_PIC">		<xsl:if test="pic != '' and not(lna = 'D') and not(lna = 'B') and not(lna = 'L') and not(lna = 'X')">			<PIC value="{pic}"/>		</xsl:if>	</xsl:template>	<!--Drop the field LPIC in Maps for LNA = D, B, S(Commx equivalent value 'L'), X         LPIC is required when ACT = W or LNA = N, P, T or V.-->	<xsl:template name="lpic_TO_LPIC">		<xsl:if test="lpic != ''  and not(lna = 'D') and not(lna = 'B') and not(lna = 'L') and not(lna = 'X')">			<LPIC value="{lpic}"/>		</xsl:if>	</xsl:template>	<!--BA is required when (( ACT = W ) or ( LNA = N, T or V )),optional when the ((ACT is S or B) or (LNA = C)), 	otherwise prohibited.-->	<xsl:template name="ba_TO_BA">		<xsl:if test="(($ACT1='T') or ($ACT1='W' or (../lna='N' or ../lna='M' or ../lna='V'))or (($ACT1='S' or $ACT1='B') or ../lna='C'))">			<xsl:choose>				<xsl:when test="../lna ='N' or ../lna= 'M' or ($ACT1='T')">					<BA>						<xsl:attribute name="value">							<xsl:value-of select="'A'"/>						</xsl:attribute>					</BA>				</xsl:when>				<xsl:when test="($ACT1='C' and  ../lna ='C' and ba='E' and @existing='N')">					<BA value="A"/>				</xsl:when>				<xsl:otherwise>					<BA value="{ba}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!--FEATURE is required when FA is populated,otherwise prohibited.-->	<xsl:template name="feature_TO_FEATURE">		<xsl:choose>			<xsl:when test="(fa!='') and (feature != '') and (/msgenvelope/header/mrktCd='MA')and feature='TTR00'">				<xsl:if test="substring($TOS,1,1)='1'">					<FEATURE value="TTB"/>				</xsl:if>				<xsl:if test="substring($TOS,1,1)='2'">					<FEATURE value="TTR"/>				</xsl:if>			</xsl:when>			<xsl:otherwise>				<xsl:if test="(fa!='') and feature != ''">					<FEATURE value="{feature}"/>				</xsl:if>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!--SYSTEMID and SHELF is Prohibited if EU STATE= CT, MA, ME, NH, NY, RI or VT.-->	<xsl:template name="systemid_TO_SYSTEMID">		<xsl:if test="systemid != '' and /msgenvelope/body/localAdmin/location/address[not(state = 'CT') and not(state = 'MA')   and not(state ='ME') and not(state ='NH') and not(state ='NY') and not(state ='RI') and not(state ='VT')]">			<SYSTEMID value="{systemid}"/>		</xsl:if>	</xsl:template>	<!--SHELF should be 1-2 alphanumeric. Need to map only first 2 char. -->	<xsl:template name="shelf_TO_SHELF">		<xsl:if test="shelf != '' and  /msgenvelope/body/localAdmin/location/address[not(state = 'CT') and not(state = 'MA')    and not(state ='ME') and not(state ='NH') and not(state ='NY') and not(state ='RI') and not(state ='VT')]">			<SHELF value="{substring(shelf,1,2)}"/>		</xsl:if>	</xsl:template>	<!--*************************Specific mapping templates of supplier specific fields in PS form*************************-->	<xsl:template name="exkey_TO_EXKEY">		<xsl:if test="exkey != ''">			<EXKEY value="{exkey}"/>		</xsl:if>	</xsl:template>	<xsl:template name="value_TO_FEATUREDETAIL">		<xsl:param name="countfeature"/>		<xsl:choose>			<xsl:when test="($countfeature=1)">				<xsl:variable name="name1" select="featuredetail[1]/name"/>				<xsl:variable name="value1" select="featuredetail[1]/value"/>				<xsl:variable name="append1" select="concat('/',$name1,' 1 ',substring($value1,1,3),' ',substring($value1,4,3),'-',substring($value1,7,4))"/>				<FEATUREDETAIL value="{$append1}"/>			</xsl:when>			<xsl:when test="($countfeature=2)">				<xsl:variable name="name1" select="featuredetail[1]/name"/>				<xsl:variable name="value1" select="featuredetail[1]/value"/>				<xsl:variable name="append1" select="concat('/',$name1,' 1 ',substring($value1,1,3),' ',substring($value1,4,3),'-',substring($value1,7,4))"/>				<xsl:variable name="name2" select="featuredetail[2]/name"/>				<xsl:variable name="value2" select="featuredetail[2]/value"/>				<xsl:variable name="append2" select="concat('/',$name2,' ',$value2)"/>				<FEATUREDETAIL value="{concat($append1,$append2)}"/>			</xsl:when>		</xsl:choose>	</xsl:template>	<!--xsl:template name="pqty_TO_PQTY">		<xsl:variable name="countService" select="count(/msgenvelope/body/lns/service[lna='W'])"/>		<xsl:choose>			<xsl:when test="$ACT1='C'">				<PQTY value="{format-number((count(service)-$countService),'00000')}"/>			</xsl:when>					<xsl:otherwise>				<PQTY value="{format-number(count(service),'00000')}"/>			</xsl:otherwise>		</xsl:choose>			</xsl:template-->	<xsl:template name="pqty_TO_PQTY">		<xsl:variable name="countService">			<xsl:choose>				<xsl:when test="$ACT1='C'">					<xsl:value-of select="format-number((count(service)-count(service[lna ='C' and (blockinfo[*][ba='N' or not(ba = 'E' and @existing ='Y')] and  (lpicci ='N' and picci='N') and not(/msgenvelope/body/localAdmin/admin/lscp != '') and (featureinfo[*]/fa='W'))])-count(service[lna='W'])),'00000')"/>				</xsl:when>				<xsl:when test="$ACT1='T'">					<xsl:value-of select="format-number((count(service)-count(/msgenvelope/body/lns/service[lna!='M'])),'00000')"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="format-number(count(service)-count(service[lna ='C' and not(blockinfo[*][ba!='N' and not(ba = 'E' and @existing ='Y')] or (featureinfo[*]/fa!='W'))]),'00000')"/>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:if test="$countService!=''">			<PQTY value="{$countService}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lnum_TO_LOCNUM">		<xsl:if test="lnum != ''">			<LOCNUM value="{format-number(lnum,'000')}"/>		</xsl:if>	</xsl:template>	<xsl:template name="tos_TO_TOS">		<xsl:choose>			<xsl:when test="$ACT1 = 'J'">				<TOS value="{concat(substring(tos,1,1),'---')}"/>			</xsl:when>			<xsl:otherwise>				<TOS value="{tos}"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="ld2_TO_LD1">		<xsl:if test="ld2 != ''">			<LD1 value="{ld2}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv1_TO_LV3">		<xsl:if test="lv1 != ''">			<LV3 value="{lv1}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv2_TO_LV3">		<xsl:if test="lv2 != ''">			<LV3 value="{lv2}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv2_TO_LV1">		<xsl:if test="lv2 != ''">			<LV1 value="{lv2}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv3_TO_LV1">		<xsl:if test="lv3 != ''">			<LV1 value="{lv3}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv1_TO_LV2">		<xsl:if test="lv1 != ''">			<LV2 value="{lv1}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lv3_TO_LV2">		<xsl:if test="lv3 != ''">			<LV2 value="{lv3}"/>		</xsl:if>	</xsl:template>	<xsl:template name="ld3_TO_LD1">		<xsl:if test="ld3 != ''">			<LD1 value="{ld3}"/>		</xsl:if>	</xsl:template>	<xsl:template name="ld1_TO_LD2">		<xsl:if test="ld1 != ''">			<xsl:choose>				<xsl:when test="ld1 = 'FLR'">					<LD2 value="FL"/>				</xsl:when>				<xsl:otherwise>					<LD2 value="{ld1}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<xsl:template name="ld2_TO_LD2">		<xsl:if test="ld2 != ''">			<xsl:choose>				<xsl:when test="ld2 = 'FLR'">					<LD2 value="FL"/>				</xsl:when>				<xsl:otherwise>					<LD2 value="{ld2}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<xsl:template name="ld3_TO_LD2">		<xsl:if test="ld3 != ''">			<xsl:choose>				<xsl:when test="ld3 = 'FLR'">					<LD2 value="FL"/>				</xsl:when>				<xsl:otherwise>					<LD2 value="{ld3}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<xsl:template name="ld1_TO_LD3">		<xsl:if test="ld1 != ''">			<LD3 value="{ld1}"/>		</xsl:if>	</xsl:template>	<xsl:template name="ld2_TO_LD3">		<xsl:if test="ld2 != ''">			<LD3 value="{ld2}"/>		</xsl:if>	</xsl:template>	<xsl:template name="lscp_TO_LSCP">		<xsl:if test="/msgenvelope/body/localAdmin/admin/lscp != ''">			<xsl:for-each select="/msgenvelope/body/localAdmin/admin">				<LSCP value="{lscp}"/>			</xsl:for-each>		</xsl:if>	</xsl:template>	<xsl:template name="fa_TO_FA">		<xsl:if test="fa != ''">			<xsl:choose>				<xsl:when test="$ACT = 'V' and ../lna = 'V' and fa = 'N'">					<FA value="V"/>				</xsl:when>				<xsl:when test="$ACT = 'V' and ../lna = 'V' and fa = 'W'">					<!--Dropped-->				</xsl:when>				<xsl:otherwise>					<FA value="{fa}"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<xsl:template match="msgenvelope">	</xsl:template></xsl:stylesheet>